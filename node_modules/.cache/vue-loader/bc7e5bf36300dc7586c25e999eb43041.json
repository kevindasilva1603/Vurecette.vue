{"remainingRequest":"/Users/kevindasilva/Downloads/Quizz-Vue-main/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kevindasilva/Downloads/Quizz-Vue-main/src/components/Question.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/kevindasilva/Downloads/Quizz-Vue-main/src/components/Question.vue","mtime":1711536878919},{"path":"/Users/kevindasilva/Downloads/Quizz-Vue-main/node_modules/cache-loader/dist/cjs.js","mtime":1710932406000},{"path":"/Users/kevindasilva/Downloads/Quizz-Vue-main/node_modules/babel-loader/lib/index.js","mtime":1711529597756},{"path":"/Users/kevindasilva/Downloads/Quizz-Vue-main/node_modules/cache-loader/dist/cjs.js","mtime":1710932406000},{"path":"/Users/kevindasilva/Downloads/Quizz-Vue-main/node_modules/vue-loader/lib/index.js","mtime":1711529598703}],"contextDependencies":[],"result":["\n export default { props: { currentQuestion: Object, next: Function, increment: Function,\n}, data() { return { selectedIndex: null, correctIndex: null, answered: false, shuffledAnswers:\n[], }; }, watch: { currentQuestion: { immediate: true, handler() { this.answered\n= false; this.selectedIndex = null; this.correctIndex = null; this.shuffleAnswers();\n}, }, }, methods: { shuffleAnswers() { const answers = [...this.currentQuestion.incorrect_answers,\nthis.currentQuestion.correct_answer]; for (let i = answers.length - 1; i > 0; i--)\n{ const j = Math.floor(Math.random() * (i + 1)); [answers[i], answers[j]] = [answers[j],\nanswers[i]]; } this.shuffledAnswers = answers; }, selectAnswer(index) { if (!this.answered)\n{ this.selectedIndex = index; } }, submitAnswer() { this.answered = true; this.correctIndex\n= this.shuffledAnswers.indexOf(this.currentQuestion.correct_answer); this.increment(this.selectedIndex\n=== this.correctIndex); }, }, };\n",{"version":3,"sources":["Question.vue"],"names":[],"mappings":";AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Question.vue","sourceRoot":"src/components","sourcesContent":["<template>\n\n    <div class=\"question-box-container\">\n\n        <div class=\"jumbotron\">\n\n            <h1 class=\"display-4\">{{ currentQuestion.question }}</h1>\n\n            <hr class=\"my-4\" />\n\n            <div class=\"list-group\">\n\n                <a\n                    v-for=\"(answer, index) in shuffledAnswers\"\n                    :key=\"index\"\n                    class=\"list-group-item list-group-item-action\"\n                    @click=\"selectAnswer(index)\"\n                    :class=\"{ 'bg-info': selectedIndex === index, 'bg-success': answered && index === correctIndex, 'bg-danger': answered && index !== correctIndex && selectedIndex === index }\"\n                >\n                     {{ answer }}\n                </a>\n\n            </div>\n\n            <button\n                class=\"btn btn-primary mt-3\"\n                @click=\"submitAnswer\"\n                :disabled=\"selectedIndex === null || answered\"\n            >\n                 Soumettre\n            </button>\n\n            <button class=\"btn btn-success mt-3\" @click=\"next\">Suivant</button>\n\n        </div>\n\n    </div>\n\n</template>\n\n<script>\n export default { props: { currentQuestion: Object, next: Function, increment: Function,\n}, data() { return { selectedIndex: null, correctIndex: null, answered: false, shuffledAnswers:\n[], }; }, watch: { currentQuestion: { immediate: true, handler() { this.answered\n= false; this.selectedIndex = null; this.correctIndex = null; this.shuffleAnswers();\n}, }, }, methods: { shuffleAnswers() { const answers = [...this.currentQuestion.incorrect_answers,\nthis.currentQuestion.correct_answer]; for (let i = answers.length - 1; i > 0; i--)\n{ const j = Math.floor(Math.random() * (i + 1)); [answers[i], answers[j]] = [answers[j],\nanswers[i]]; } this.shuffledAnswers = answers; }, selectAnswer(index) { if (!this.answered)\n{ this.selectedIndex = index; } }, submitAnswer() { this.answered = true; this.correctIndex\n= this.shuffledAnswers.indexOf(this.currentQuestion.correct_answer); this.increment(this.selectedIndex\n=== this.correctIndex); }, }, };\n</script>\n\n<style scoped>\n.selected {\n    background-color: rgb(0, 182, 242) !important;\n}\n.correct {\n    background-color: rgb(51, 113, 51) !important;\n}\n.incorrect {\n    background-color: rgb(143, 0, 0) !important;\n}\n</style>\n\n"]}]}